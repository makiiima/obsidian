/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => NativeScrollbarPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var NativeScrollbarPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      document.body.addClass("native-scrollbars");
      this.registerEvent(this.app.workspace.on("css-change", () => {
        this.removeScrollbarStyles();
      }));
      setTimeout(() => {
        this.removeScrollbarStyles();
      });
    });
  }
  removeScrollbarStyles() {
    for (let i = 0, len = document.styleSheets.length; i < len; i++) {
      const sheet = document.styleSheets.item(i);
      try {
        const ruleSet = sheet.cssRules;
        for (let j = 0; j < ruleSet.length; j++) {
          const rule = ruleSet.item(j);
          if (/-webkit-scrollbar/.test(rule.selectorText)) {
            sheet.deleteRule(j--);
          }
        }
      } catch (e) {
        console.debug("Obsidian Native Scrollbars: ", e);
      }
    }
  }
  onunload() {
    document.body.removeClass("native-scrollbars");
    new import_obsidian.Notice("Native scrollbars disabled. Restart is required to take effect.", 5e3);
  }
};
